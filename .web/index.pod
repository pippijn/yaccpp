=head1 YACC Preprocessor

The C<yaccpp> project is a preprocessor for YACC/Bison grammars.

=cut

L<Git repository|https://github.com/pippijn/yaccpp>

=pod

Yaccpp implements a few features on top of traditional YACC. As you will see
after reading this article, Yaccpp is more than just a preprocessor. Yaccpp is a
purely functional dynamically typed domain specific programming language for
describing context-free grammars. That is quite a mouthful, but this power does
not get in the way. Yaccpp is still about writing grammars, not programs.

=head2 // Comments

Yacc allows C</* */> comments. Yaccpp also allows C99-style C<//> comments.

=head2 Generate foreign language actions

If a foreign language such as L<Aldor|../aldor/> or Perl includes a C FFI,
Yaccpp can generate calls into this language, so that actions can be written in
a non-C language while keeping the parser implementation in C. This way, new
languages can get a well-tested parser generator without having to write their
own Bison template. A Perl module or Aldor domain will be generated to
encapsulate the action code. This feature can be controlled using the
C<%action-lang> directive.

=begin code cpp

   %action-lang "Aldor" MyLanguageParserDom
   // or:
   %action-lang "Perl" Parse::MyLanguage

=end code


=head2 Merge multiple input files

By listing several files on the command line, you can merge multiple grammar
fragments into a single grammar. This aids in modularising grammars. You may
optionally define an entry point into the fragment with C<%start>. All
nonterminals in the fragment except the start symbol will be prefixed with the
start symbol name, thus creating a kind of scope.

=head2 Automatic parse tree generation

Yaccpp can generate parse tree classes for C++ or structs for C using the
C<%parse-tree> directive. These represent the original grammar structure rather
than the expanded grammar. Note that unlike abstract syntax trees (ASTs), the
parse tree contains everything, including all tokens such as C<'+'>, C<';'> and
C<'{'> tokens. The class members will carry the names of the rhs parts. If more
than one rhs part has the same name, an 1-based index is appended.

=begin code cpp

   %parse-tree "C++"
   %%
   add_exp
      : mul_exp
      | add_exp '+' mul_exp %class add_exp
      | add_exp '-' mul_exp %class add_exp
      ;

=end code

The above grammar productions will yield two classes. By using the C<%class>
directive, the common productions are written directly in the base class
C<add_exp_node>. This class will have three members C<add_exp>, C<tok>,
C<mul_exp>.

If C<%class> is omitted, each production will get its own class,
unless a pattern can be detected. If C<%class> had been omitted in the above
example, the three classes would be:

=begin code cpp

   add_exp_node <<abstract>>
   add_exp_node1 : add_exp_node { node *mul_exp; };
   add_exp_node2 : add_exp_node { node *add_exp, *tok, *mul_exp; };

=end code


=head2 Expand macro grammars

Yaccpp implements a variant of macro grammars as described in Peter Thiemann's
L<Macros for Context-Free Grammars|http://www.informatik.uni-freiburg.de/~thiemann/papers/macro-grammar.pdf>
paper.

=begin code cpp

   // E (sep E)*
   list(E, sep, list_type)
      : E
         // You may refer to arguments of macros in action code using the ` prefix.
         { ($$ = new `list_type)->add ($1); }
      | list(E, sep, list_type) sep E
         { ($$ = $1)->add ($3); }
      ;

   argument_list: '(' list (argument, ';', node_list) ')';

=end code

In addition to the expansion described in the paper, Yaccpp supports higher
order programming by passing unexpanded macro names to other macros. These
macros can then be expanded within the other macro.

=head3 Currying and variadic macros

Macros can also be partially expanded by passing a strict subset of the required
arguments. This is a form of currying. Arguments can be passed explicitly by name.
Macros can be overloaded by argument count. Using the C<...> operator at the end
of a parameter list, a macro may accept any number of arguments. Overloading
resolution will select L<variadic|http://en.wikipedia.org/wiki/Variadic_function>
macros only if there is no overload with the exact number of parameters.

=begin code cpp

   opt(E)
      : /* empty */
      | E
      ;

   // partially apply the macro
   apply(macro, arg): macro (arg) ;
   // recursively expand the apply macro with less and less arguments
   // until there is no "rest", anymore, and the first "apply" macro is called
   apply(macro, arg, rest...): apply (apply (macro, arg), rest...) ;

   expr.opt
      : opt(E: expr) // named arguments
      ;

=end code

Variadic arguments can not be directly expanded in the grammar. If you need a
space separated list of all arguments passed to a macro, you will need to use
something like this:

=begin code cpp

   expand(arg, rest...): arg expand(rest...);

=end code

=head3 Specialisation (@spec)

Sometimes you may want to specialise a generic macro by production. Macros can
be specialised by overloading them and defining one or more of its arguments
with a production name.

=begin code cpp

   // Generic list macro for the + operator
   list.1(E)
      : E
      | list.1(E) E
      ;

   // specialise the macro for list of "statement"
   list.1(E: statement)
      : E ';'
      | list.1(E) E ';'
      ;

=end code

=head3 Pattern matching

Macros can not only be specialised with production names, but also with ML-style
patterns.

=begin code cpp

   // specialise the '+' macro for list of optional statements
   list.1(E: opt(E: statement))
      : ';'
      | list.1(E) E ';'
      ;

   // partially specialise to extract the argument
   // this macro reverses the effect of opt(E)
   notopt(E: opt(E)) : E ;
   // anything else is used as-is
   notopt(E): E ;

   foo
      : notopt(opt(statement)) // => statement
      | notopt(expression) // => expression
      ;

=end code

=head3 Analysis

Yaccpp performs an extensive analysis of the macro grammar before attempting to
expand it, to ensure that the grammar terminates. It is also an error to have
unexpanded or partially expanded macros when the grammar terminates. Anonymous
macros defined inline in an argument list are not supported.

=head2 Refer to other symbols on the rhs

As a form of abbreviation, you may use variable references on the rhs of a rule.

=begin code cpp

   some_macro(with,many,arguments,it,would,be,unfeasible,to,write,it,again)
      : $$ with it
      | many $$ arguments
      | unfeasible to write $$
      | again $$ to write
      ;

   initialiser
      : '[' assignment.expression "..." $2 ']' basic.initialiser
      ;

   asm.statement
      : "asm" type.qualifier '(' string.literal.list
        ':' asm.argument.list?[L] // define a named component
        ':' $L // refer to it here
        ':' asm.clobbered.list ')' ';'

=end code


=head2 Regular grammars on the rhs

Yaccpp supports regular grammars known from regular expressions and EBNF on the
right hand side of rules.

=begin code cpp

   identifier
      // Note that you need to write out the "..." yourself. Character ranges
      // are not supported.
      : ('a' | 'b' | ... | 'z' | 'A' | ... | 'Z')
        ('a' | 'b' | ... | 'z' | 'A' | ... | 'Z' | '0' | ... '9')*
      ;

   // Be careful:
   macro(A): A;
   nonterm: macro (foo | bar)*; // does not call macro
   nonterm: macro ((foo | bar))*; // calls macro and repeats the expansion {0,n}
   nonterm: macro ((foo | bar)*); // repeats the alternatives {0,n} and calls macro on that

   // The second definition would expand to the the following:
   nonterm: macro (anon123)*;
   nonterm: list.0 (macro (anon123));
   nonterm: list.0 (macro__anon123);
   nonterm: list.0__macro__anon123;

=end code

As a generic tool, Yaccpp cannot know how you want to handle lists and optional
elements, it requires the grammar to contain the following definitions. Defaults
are provided, if a definition is not given. The list macros do not, however, know how to
handle their values and therefore do not have a type, unless the automatic tree
generation feature is used, in which case a list implementation is provided and
used (C<std::list> for C++, a custom list implementation for C).

=over

=item *

The C<*> postfix operator calls the C<list.0(E)> macro on the preceding atom.

=item +

The C<*> postfix operator calls the C<list.1(E)> macro on the preceding atom.

=item ?

The C<?> postfix operator calls the C<opt(E)> macro on the preceding atom.

=item |

The C<|> infix operator does not require any special support, because it is
actually just an anonymous rule. It is copied to a separate rule with a unique
name and that rule name is written in its place. You can write semantic actions
in anonymous rules just as you would in global rules. If all alternatives have
the same type, the type of the anonymous rule is inferred to be that type.
Otherwise, you need to specify the type, explicitly.

=begin code cpp

   // OK: all alternatives have the same type; $1's type is "token"
   local: (alt1 | alt2) { $$ = $1; } // this is implicit
   alt1<token>: TK_IDENTIFIER;
   alt2<token>: TK_STRING;

   // OK: explicit type given
   local: (alt1 | alt2)<node>; // implicit $$ = $1
   alt1<node>: funcall;
   alt2<token>: TK_IDENTIFIER;

   // ERROR: ambiguous type
   local: (alt1 | alt2);
   alt1<node>: funcall;
   alt2<token>: TK_IDENTIFIER;

=end code

=back


=head2 Named references

Added in Bison 2.5, this feature is very useful for long rules. Especially when
these rules change a lot, it is easy to make a mistake in counting the indices.

=begin code cpp

   funcall: id '(' args ')'
         { $funcall = new funcall ($id, $args); }

   addition: exp[left] '+' exp[right-side]
         { $$ = $left + $[right-side]; } // use [] because the name has a - in it

=end code

See the L<Bison manual|http://www.gnu.org/software/bison/manual/bison.html#Named-References>
for more examples and details.


=head2 Import token names and numbers from an enum

The C<%include-enum> directive can be used to parse a C enumeration in order to
extract token names and numbers. This is useful for unlinking the lexical
analysis from the parsing. The usual practice is to generate an C<enum> or
C<#define> list from the grammar and use that in the scanner. Using
C<%include-enum>, both use the same external token information source without
depending on each other.

=begin code cpp

   // we import symbols from "enum token_type" in "tokens.h":
   %include-enum "tokens.h" token_type

=end code


=head2 Specify types on lhs of rules

Defining the types at the top of a grammar file splits information about rules
in two parts: the type information and the actual rule. In Yaccpp, you can
declare the type on the nonterminal you are defining.

=begin code cpp

   add_exp<add_exp_node>: exp + exp ;
   // becomes
   %type<add_exp_node> add_exp
   %%
   add_exp: exp + exp ;

=end code

If you split the definition of a nonterminal into several separate rules, you
only need to define the type on one of them. Defining a different type on the
same nonterminal is an error.

=head2 Default token and rule types

Using the C<%default-token-type>, you can specify the type to be used on tokens
read from the included enum. They may be overridden using the C<%token> directive.
The C<%default-rule-type> defines the default type of lhs symbols.

=begin code cpp

   %default-rule-type <ast_node>
   %%
   decls: decl | decls decl ;

   // becomes:
   %type<ast_node> decls decl
   %%
   decls: decl | decls decl ;

=end code

You may override the type analogously to the token types.


=head2 "typeof"

You may refer to the type of any typed nonterminal or terminal using the new
C<#> symbol.

=begin code cpp

   %type<funcall_node> funcall
   %%
   funcall: id '(' args ')'
         { $$ = new #$ ($1, $3); }

   // is translated to:
   funcall: id '(' args ')'
         { $$ = new funcall_node ($1, $3); }

=end code

You may also refer to the types of rhs symbols, which may be useful in template
instantiations.

=begin code cpp

   %type<add_exp_node> add_exp
   %type<mul_exp_node> mul_exp
   %type<div_exp_node> div_exp
   %%
   add_exp: mul_exp + div_exp
         { $$ = new $#<#1, #3> ($1, $3); } // template instantiation

   // is translated to:
   add_exp: mul_exp + div_exp
         { $$ = new add_exp_node<add_exp_node, mul_exp_node> ($1, $3); }

=end code

Referring to the type of untyped (non)terminals is an error.

=back

=head2 Extensible through Perl

If all the added functionality is not enough for you or you need something done
slightly differently, you can use the Perl API to influence the translation and
extract additional information from the grammar.
